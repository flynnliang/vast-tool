package com.flynn.vast.util;

import com.google.common.base.Strings;
import com.sun.deploy.util.StringUtils;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Objects;

/**
 * The implementation of this tool depends on the JAXB (Java Architecture for XML Binding)
 * and the entity of the VAST3.0 generated by xjc.
 * <p>
 * notice: This Util adapted to each version of the vast(obj to xml, or xml to obj),
 * but this lib only generated vast3_draft.xsd (xsd schema for VAST3.0 downloaded from the domain of iab),
 * other version entity should be the same easily be generated in this project.
 * and it can deal with other obj which observe the jaxb proto.
 *
 * @author flynn
 */
public class VastUtil {

    private static final String UTF_8_ENCODING = "utf-8";


    /**
     * the vast entity convert to xml data.
     *
     * @param vastEntity the entity of vast generated from xsd
     * @return the xml data that is formatted with linefeeds and indentation.
     * @throws JAXBException the exception should be handled by yourself
     */
    public static String convertToXml(Object vastEntity) throws Exception {

        return convertToXml(vastEntity, UTF_8_ENCODING, true);
    }

    //the xml data that not be formatted with linefeeds and indentation.
    public static String converToNoFormatXml(Object vastEntity) throws JAXBException {

        return convertToXml(vastEntity, UTF_8_ENCODING, false);
    }

    /**
     * the vast entity convert to xml data.
     *
     * @param vastEntity the entity of vast generated from xsd
     * @param encoding   the encoding such as "UTF-8"
     * @param formatted  true/false formatted with linefeeds and indentation.
     * @return the xml data
     */
    private static String convertToXml(Object vastEntity, String encoding, boolean formatted) throws JAXBException {

        Objects.requireNonNull(vastEntity,"the vast entity must not be null!");

        Marshaller marshaller = createMarshaller(vastEntity);

        //TODO checking the other properties
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, formatted);
        marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);
        StringWriter writer = new StringWriter();
        marshaller.marshal(vastEntity, writer);
        return writer.toString();
    }

    private static Marshaller createMarshaller(Object vastEntity) throws JAXBException {

        return JAXBContext.newInstance(vastEntity.getClass()).createMarshaller();
    }

    @SuppressWarnings("unchecked")
    public static <T> T converyToJavaBean(String xml, Class<T> c) throws JAXBException {

        if (Strings.isNullOrEmpty(xml)) {
            throw new IllegalArgumentException("the xml data must not be blank!");
        }

        JAXBContext context = JAXBContext.newInstance(c);
        Unmarshaller unmarshaller = context.createUnmarshaller();
        return (T) unmarshaller.unmarshal(new StringReader(xml));

    }
}
